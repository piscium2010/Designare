import * as React from 'react';
import SyncScrolling from './SyncScrolling';
import { column } from './util';
import './table.css';
declare type filter = {
    columnMetaKey?: string;
    dataKey: string;
    filterValue: any;
    name?: string;
    by?: string | ((...args: any[]) => boolean);
};
declare type sorter = {
    columnMetaKey?: string;
    dataKey: string;
    direction: string;
    by?: string | ((...args: any[]) => number);
};
declare type global = {
    'designare-draggable-column-index'?: string;
    'designare-draggable-row-index'?: string;
    'resizing': boolean;
};
interface ITableProps extends React.HTMLAttributes<HTMLDivElement> {
    activeColor?: string;
    defaultColor?: string;
    pageNo?: number;
    pageSize?: number;
    total?: number;
    data?: any[];
    filters?: filter[];
    sorter?: sorter;
    onChangeColumns?: (columns: column[]) => void;
    onChangePaging?: ({ pageSize, pageNo }: {
        pageSize: any;
        pageNo: any;
    }) => void;
    onChangeRows?: (data: any[]) => void;
    onChangeSorter?: (sorter: sorter) => void;
    onChangeFilters?: (filters: filter[]) => void;
    columns: column[];
    loading?: boolean | JSX.Element | ((...args: any[]) => JSX.Element);
    rowHeight?: number;
    pageSizeOptions?: number[];
}
declare type state = {
    pageNo: number;
    pageSize: number;
    error?: any;
    hasError: boolean;
};
export default class Table extends React.Component<ITableProps, state> {
    static defaultProps: {
        children: JSX.Element;
        defaultSorter: {};
        onChangeColumns: () => void;
        onChangeRows: () => void;
        onChangeSorter: () => void;
        onChangeFilters: () => void;
        onChangePaging: () => void;
        activeColor: string;
        defaultColor: string;
        resizable: boolean;
        rowHeight: number;
    };
    static getDerivedStateFromError(error: any): {
        hasError: boolean;
        error: any;
    };
    root: React.RefObject<HTMLElement>;
    filterLayersRef: React.RefObject<HTMLElement>;
    isInit: boolean;
    activeSorter: {
        columnMetaKey: any;
        dataKey?: any;
        direction: any;
        by?: any;
    };
    tableDidMountListeners: Map<any, ''>;
    activeFilters: Map<string, filter>;
    syncScrollingInstance: SyncScrolling;
    dimensionInfo: {
        dimensionId?: string;
        originalMaxWidthArray?: number[];
        headerWidthArray?: number[];
        leftHeaderWidthArray?: number[];
        rightHeaderWidthArray?: number[];
        bodyWidthArray?: number[];
        leftBodyWidthArray?: number[];
        rightBodyWidthArray?: number[];
        headerHeightArray?: number[];
        leftHeaderHeightArray?: number[];
        rightHeaderHeightArray?: number[];
        bodyHeightArray?: number[];
        leftBodyHeightArray?: number[];
        rightBodyHeightArray?: number[];
        maxWidthArray?: number[];
    };
    resizedWidthInfo: Map<string, number>;
    debouncedUpdate: () => void;
    debouncedSyncWidthAndHeight: (force?: boolean) => void;
    debouncedReSyncWidthAndHeight: (force?: boolean) => void;
    warnings: Map<string, 'printed'>;
    cells: Map<any, ''>;
    headerCells: Map<any, ''>;
    global: global;
    contextAPI: {
        getFilterLayerContainer: (columnMetaKey: string) => Element;
        getDefaultFilters: () => filter[] | undefined;
        getFilters: () => filter[] | undefined;
        setActiveFilter: (f: filter) => void;
        getActiveFilters: () => Map<string, filter>;
        removeActiveFilter: (key: string) => void;
        onChangeFilters: ({ pageSize, pageNo }: {
            pageSize: any;
            pageNo: any;
        }) => void;
        getDefaultSorter: () => sorter;
        getSorter: () => sorter;
        setActiveSorter: (s: sorter) => void;
        getActiveSorter: () => sorter;
        onChangeSorter: (s: sorter) => void;
        addEventListener: (type: string, func: (...args: any[]) => void) => void;
        removeEventListener: (type: string, func: (...args: any[]) => void) => void;
        syncScrolling: (scrollable: HTMLElement, mode?: string) => void;
        removeSyncScrolling: (scrollable: HTMLElement) => void;
        reSyncWidthAndHeight: (force?: boolean) => void;
        syncScrollBarStatus: () => void;
        getColGroups: () => any[];
        setResizedWidthInfo: (columnMetaKey: string, width: number) => void;
        isInit: () => boolean;
        cells: Map<any, ''>;
        headerCells: Map<any, ''>;
        activeColor: string;
        defaultColor: string;
        rowHeight: number;
        global: global;
        onChangeColumns: (columns: any) => void;
        onChangeRows: (data: any) => void;
        resizable: boolean;
    };
    defaultFilters: filter[];
    defaultSorter: sorter;
    updateId: number;
    flattenSortedColumns: column[];
    depthOfColumns: number;
    sortedColumns: column[];
    data: any[];
    constructor(props: any);
    get pageNo(): number;
    get pageSize(): number;
    get total(): number;
    get isPaging(): boolean;
    get isClientPaging(): boolean;
    getDefaultFilters: () => filter[];
    getFilters: () => filter[];
    getActiveFilters: () => Map<string, filter>;
    setActiveFilter: ({ columnMetaKey, dataKey, filterValue, name, by }: filter) => void;
    removeActiveFilter: (columnMetaKey: any) => void;
    getDefaultSorter: () => sorter;
    getSorter: () => sorter;
    setActiveSorter: ({ columnMetaKey, dataKey, direction, by }: sorter) => void;
    setResizedWidthInfo: (columnMetaKey: string, width: number) => void;
    getActiveSorter: () => sorter;
    getFilterLayerContainer: (columnMetaKey: string) => Element;
    getColGroups: () => (number[] | HTMLElement[])[];
    addEventListener: (type: string, func: any) => void;
    removeEventListener: (type: string, func: any) => void;
    syncScrolling: (scrollable: HTMLElement, mode?: string) => void;
    removeSyncScrolling: (scrollable: HTMLElement) => void;
    sort: (data: any) => unknown[];
    filter: (data: any) => any;
    filterAndSort: (data: any) => any;
    paging: (data: any) => any;
    onGoToPage: (pageNo: any) => void;
    setPageSize: (pageSize: any) => void;
    update: () => void;
    printWarnings: (warnings: any) => void;
    syncWidthAndHeight: (force?: any) => void;
    reSyncWidthAndHeight: (force?: boolean) => void;
    syncScrollBarStatus: () => void;
    resize: () => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
}
export {};
